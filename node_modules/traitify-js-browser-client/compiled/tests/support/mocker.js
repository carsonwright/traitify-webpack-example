// Generated by CoffeeScript 1.12.3
var MockIEXMLRequest, MockRequest, MockRequestWithError;

MockRequest = (function() {
  var mocks;

  mocks = Array();

  MockRequest.addMock = function(options) {
    return mocks.push(options);
  };

  function MockRequest() {
    this.headers = Array();
    this.response = null;
    this.onload = function() {};
  }

  MockRequest.prototype.open = function(method, url) {
    this.currentMethod = method;
    return this.currentUrl = url;
  };

  MockRequest.prototype.send = function(params) {
    var currentMethod, currentUrl, request;
    currentMethod = this.currentMethod;
    currentUrl = this.currentUrl;
    params = JSON.parse(params);
    request = mocks.filter(function(request) {
      var goodParams, key, ref, value;
      goodParams = true;
      if (request.params && JSON.stringify(params) === JSON.stringify({})) {
        if (params) {
          ref = request.params;
          for (key in ref) {
            value = ref[key];
            goodParams = goodParams && params[key] === value;
          }
        } else {
          goodParams = false;
        }
      }
      return request.method === currentMethod && request.url === currentUrl && goodParams;
    });
    if (request[0]) {
      this.response = JSON.stringify(request[0].response);
      return this.onload();
    } else {
      console.log(currentMethod + " with url " + currentUrl + " and " + (JSON.stringify(params)) + " is not mocked");
      return this.onload();
    }
  };

  MockRequest.prototype.setRequestHeader = function(key, value) {
    return this.headers.push([key, value]);
  };

  MockRequest.prototype.withCredentials = function() {
    Object();
    return this;
  };

  return MockRequest;

})();

MockIEXMLRequest = (function() {
  var mocks;

  mocks = Array();

  MockIEXMLRequest.addMock = function(options) {
    return mocks.push(options);
  };

  function MockIEXMLRequest() {
    this.headers = Array();
    this.response = null;
    this.onload = function() {};
  }

  MockIEXMLRequest.prototype.open = function(method, url) {
    this.currentMethod = method;
    return this.currentUrl = url;
  };

  MockIEXMLRequest.prototype.send = function(params) {
    var currentMethod, currentUrl, request;
    currentMethod = this.currentMethod;
    currentUrl = this.currentUrl;
    params = JSON.parse(params);
    request = mocks.filter(function(request) {
      var goodParams, key, ref, value;
      goodParams = true;
      if (request.params && JSON.stringify(params) === JSON.stringify({})) {
        if (params) {
          ref = request.params;
          for (key in ref) {
            value = ref[key];
            goodParams = goodParams && params[key] === value;
          }
        } else {
          goodParams = false;
        }
      }
      return request.method === currentMethod && request.url === currentUrl && goodParams;
    });
    if (request[0]) {
      this.response = JSON.stringify(request[0].response);
      return this.onload();
    } else {
      console.log(currentMethod + " with url " + currentUrl + " and " + (JSON.stringify(params)) + " is not mocked");
      return this.onload();
    }
  };

  MockIEXMLRequest.prototype.setRequestHeader = function(key, value) {
    return this.headers.push([key, value]);
  };

  return MockIEXMLRequest;

})();

MockRequestWithError = (function() {
  var mocks;

  mocks = Array();

  MockRequestWithError.addMock = function(options) {
    return mocks.push(options);
  };

  function MockRequestWithError() {
    this.headers = Array();
    this.response = null;
    this.onload = function() {};
  }

  MockRequestWithError.prototype.open = function(method, url) {
    this.currentMethod = method;
    return this.currentUrl = url;
  };

  MockRequestWithError.prototype.send = function(params) {
    throw "Mock Request Error";
  };

  MockRequestWithError.prototype.setRequestHeader = function(key, value) {
    return this.headers.push([key, value]);
  };

  MockRequestWithError.prototype.withCredentials = function() {
    Object();
    return this;
  };

  return MockRequestWithError;

})();
