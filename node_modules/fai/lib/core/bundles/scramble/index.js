var AST, ASTtypes, Decoder, ESCodeGen, Encoder, EsPrima, EsTraverse, Node;

EsPrima = require('esprima');

EsTraverse = require('estraverse');

ESCodeGen = require('escodegen');

ASTtypes = require('ast-types');

AST = {
  build: ASTtypes.builders,
  type: ASTtypes.namedTypes
};

Node = require('./node');

Encoder = require('./encoder');

Decoder = require('./decoder');

module.exports = function(code) {
  var ast, body, call, decoder, encoder, fnName, func, iife, thiz;
  code = String(code);
  if (!code.length) {
    return code;
  }
  ast = EsPrima.parse(code);
  if (!ast || !ast.body || !ast.body.length) {
    return code;
  }
  encoder = new Encoder();
  decoder = new Decoder(encoder);
  ﬁ.log.custom({
    method: 'debug',
    caller: 'scramble:base'
  }, encoder.base);
  ﬁ.log.custom({
    method: 'debug',
    caller: 'scramble:code'
  }, encoder.code);
  fnName = AST.build.identifier("_" + (encoder.generate(2)));
  EsTraverse.replace(ast, {
    enter: function(_node, _parent) {
      var call, expr, name, node, value;
      node = new Node(_node, _parent);
      if (node.isUncomputedMember()) {
        name = AST.build.literal(encoder.encode(node.getProp('property').name));
        name._isEncoded = true;
        call = AST.build.callExpression(fnName, [name]);
        expr = AST.build.memberExpression(node.getProp('object'), call, true);
        return expr;
      }
      if (node.isString()) {
        if (node.getProp('_isEncoded')) {
          delete _node._isEncoded;
          return _node;
        }
        this.skip();
        value = encoder.encode(node.getValue());
        value._isEncoded = true;
        return AST.build.callExpression(fnName, [AST.build.literal(value)]);
      }
      return _node;
    }
  });
  body = AST.build.blockStatement(ast.body);
  func = AST.build.functionExpression(null, [fnName], body);
  thiz = AST.build.identifier('this');
  call = AST.build.identifier('call');
  iife = AST.build.expressionStatement(AST.build.callExpression(AST.build.memberExpression(func, call, false), [thiz, decoder.getAST()]));
  ast.body = [iife];
  return ESCodeGen.generate(ast);
};
