var AST, ASTtypes, Code, Encoder, EsPrima, EsTraverse, FS, Node, Path;

Path = require('path');

FS = require('fs');

EsPrima = require('esprima');

EsTraverse = require('estraverse');

ASTtypes = require('ast-types');

Encoder = require('../encoder');

Node = require('../node');

Code = FS.readFileSync(Path.join(__dirname, "decoder" + ﬁ.path.core.ext), ﬁ.conf.charset);

AST = {
  build: ASTtypes.builders,
  type: ASTtypes.namedTypes
};

module.exports = (function() {
  _Class.prototype.keyFound = false;

  _Class.prototype.lenFound = false;

  _Class.prototype.encoder = null;

  _Class.prototype.names = {};

  function _Class(encoder) {
    this.encoder = encoder;
  }

  _Class.prototype.getAST = function() {
    var call, code, func, thiz;
    code = EsPrima.parse(Code).body.shift().expression;
    EsTraverse.replace(code, {
      enter: (function(_this) {
        return function(_node, _parent) {
          var left, name, node;
          node = new Node(_node, _parent);
          name = node.getName();
          if ((!_this.keyFound || !_this.lenFound) && node.isAssignment()) {
            left = new Node(node.getProp('left'), node.getParent());
            if (left.isMember()) {
              left = new Node(left.getProp('property'), left);
              if (left.isIdentifier()) {
                if (left.getName() === '_full') {
                  _node.right = AST.build.literal(_this.encoder.full);
                  _this.keyFound = true;
                  return _node;
                }
                if (left.getName() === '_length') {
                  _this.lenFound = true;
                  _node.right = AST.build.literal(_this.encoder.length);
                  return _node;
                }
              }
            }
          }
          if (!node.isIdentifier() || !(name[0] === '_' && name.length > 1)) {
            return _node;
          }
          if (!_this.names[name]) {
            _this.names[name] = '_' + _this.encoder.generate();
          }
          return AST.build.identifier(_this.names[name]);
        };
      })(this)
    });
    thiz = AST.build.identifier('this');
    call = AST.build.identifier('call');
    func = AST.build.memberExpression(code.callee, call, false);
    return AST.build.newExpression(AST.build.callExpression(func, [thiz]), []);
  };

  return _Class;

})();
