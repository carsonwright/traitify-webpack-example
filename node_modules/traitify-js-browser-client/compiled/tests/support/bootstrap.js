// Generated by CoffeeScript 1.12.3
var FactoryBoy, UUID, div, link, params, require, tag, waitUntil;

require = function(file, options, type) {
  if (options == null) {
    options = Object();
  }
  if ([type, options].indexOf("css") !== -1) {
    return document.write("<style href='" + options + ".css'  rel='stylesheet' ></style>");
  } else {
    return document.write("<script src='" + file + ".js' " + (options.cover ? "data-cover" : void 0) + "></script>");
  }
};

div = function(attrs) {
  return tag("div", attrs);
};

link = function(href, attrs) {
  if (attrs == null) {
    attrs = Object();
  }
  attrs.href = href;
  attrs.rel = "stylesheet";
  return tag("link", attrs);
};

tag = function(type, attrs) {
  var j, key, len, localTag, ref;
  if (attrs == null) {
    attrs = Object();
  }
  localTag = document.createElement(type);
  ref = Object.keys(attrs);
  for (j = 0, len = ref.length; j < len; j++) {
    key = ref[j];
    localTag.setAttribute(key, attrs[key]);
  }
  return document.write(localTag.outerHTML);
};

Number.prototype.times = function(fn) {
  var j, ref, results;
  results = [];
  for (j = 0, ref = this.valueOf(); 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--) {
    results.push(fn());
  }
  return results;
};

UUID = function() {
  var s4;
  s4 = function() {
    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  };
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
};

waitUntil = function(item) {
  var promise;
  return promise = new SimplePromise(function(resolve, reject) {
    var i, timer;
    i = 0;
    return timer = setInterval(function() {
      var storedValue;
      storedValue = item();
      if (storedValue || i === 5) {
        clearInterval(timer);
        resolve(storedValue);
      }
      return i += 1;
    }, 100);
  });
};

HTMLElement.prototype.trigger = function(eventType, options) {
  var event;
  switch (eventType) {
    case "click":
      event = document.createEvent("MouseEvent");
      event.initMouseEvent('click', true, true, window, 1, 0, 0);
      return this.dispatchEvent(event);
    case "touch":
      event = document.createEvent('UIEvent');
      event.changedTouches = [
        {
          clientX: 10,
          clientY: 10
        }
      ];
      event.initUIEvent('touchstart', true, true);
      this.dispatchEvent(event);
      event = document.createEvent('UIEvent');
      event.changedTouches = [
        {
          clientX: 10,
          clientY: 10
        }
      ];
      event.initUIEvent('touchend', true, true);
      return this.dispatchEvent(event);
    default:
      event = document.createEvent("Event");
      event.initEvent(eventType, true, true);
      return this.dispatchEvent(event);
  }
};

FactoryBoy = (function() {
  function FactoryBoy() {
    this.factoryStore = Object();
    this.buildIndex = Object();
    if (this.factories) {
      this.factories();
    }
    this;
  }

  FactoryBoy.prototype.getIndex = function(key) {
    return this.buildIndex[key];
  };

  FactoryBoy.prototype.factory = function(key, hash) {
    this.buildIndex[key] = 0;
    return this.factoryStore[key] = hash;
  };

  FactoryBoy.prototype.build = function(key, options) {
    if (this.factoryStore[key]) {
      this.buildIndex[key] += 1;
      return this.factoryStore[key](this, options, this.buildIndex[key]);
    } else {
      return console.log("Your Factory " + key + " Doesn't Exist");
    }
  };

  return FactoryBoy;

})();

require("./support/qunit-1.14.0");

require("./support/blanket.min");

require("./support/jquery.min");

require("./support/qunit-composite/qunit-composite");

require("./support/qunit-composite/qunit-composite", "css");

require("../compiled/tests/support/spec_helper");

params = Object();

location.search.replace("?", "").split("&").forEach(function(value) {
  value = value.split("=");
  return params[value[0]] = value[1];
});
