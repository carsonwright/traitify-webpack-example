var Bundles, FS, OS, Path, Routes, enable, hasError;

Path = require('path');

FS = require('fs');

OS = require('os');

Routes = [];

Bundles = ﬁ.require('core.root', 'bundles');

hasError = false;

enable = function() {
  var bundle, control, controls, i, len, method, result, route;
  controls = Array.prototype.slice.call(arguments);
  method = controls.shift();
  route = controls.shift();
  bundle = null;
  if (!ﬁ.util.isString(method)) {
    throw new ﬁ.error('Expecting a method.');
  }
  if (!ﬁ.util.isString(route)) {
    throw new ﬁ.error('Expecting a route.');
  }
  if (controls.length < 1) {
    throw new ﬁ.error('Expecting at least one controller.');
  }
  if (hasError) {
    throw new ﬁ.error('An error handler has been set, no more routes allowed.');
  }
  if (method !== 'error' && !ﬁ.util.isFunction(ﬁ.server[method])) {
    throw new ﬁ.error("Invalid method. (" + method + ")");
  }
  result = [];
  for (i = 0, len = controls.length; i < len; i++) {
    control = controls[i];
    if (ﬁ.util.isString(control)) {
      bundle = control;
      control = Bundles(control);
    }
    if (!ﬁ.util.isFunction(control)) {
      throw new ﬁ.error('Invalid bundle.');
    }
    result.push(control);
  }
  Routes.push({
    route: route,
    bundle: bundle,
    method: method,
    controls: result
  });
  if (method === 'error') {
    return hasError = true;
  }
};

module.exports = {
  all: function() {
    return enable.apply(enable, ['all'].concat(Array.prototype.slice.call(arguments)));
  },
  get: function() {
    return enable.apply(enable, ['get'].concat(Array.prototype.slice.call(arguments)));
  },
  post: function() {
    return enable.apply(enable, ['post'].concat(Array.prototype.slice.call(arguments)));
  },
  put: function() {
    return enable.apply(enable, ['put'].concat(Array.prototype.slice.call(arguments)));
  },
  "delete": function() {
    return enable.apply(enable, ['delete'].concat(Array.prototype.slice.call(arguments)));
  },
  error: function() {
    return enable.apply(enable, ['error'].concat(Array.prototype.slice.call(arguments)));
  },
  stack: function() {
    return Routes;
  }
};
