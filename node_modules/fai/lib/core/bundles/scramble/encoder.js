var ascii, chars;

ascii = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

chars = "áéíóúüñabcdefghijklmnopqrstuvwxyzÁÉÍÓÚÜÑABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 -_$+";

module.exports = (function() {
  _Class.prototype.length = 4;

  _Class.prototype.base = null;

  _Class.prototype.code = null;

  _Class.prototype.full = null;

  function _Class() {
    this.full = this.scramble();
  }

  _Class.prototype.generate = function(length) {
    var i, k, ref, str;
    if (length == null) {
      length = 5;
    }
    str = '';
    for (i = k = 0, ref = length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      str += ascii.charAt(Math.floor(Math.random() * ascii.length));
    }
    return str;
  };

  _Class.prototype.encode = function(str) {
    return str.split('').map((function(_this) {
      return function(char) {
        var index;
        if ((index = _this.base.indexOf(char)) === -1) {
          return char;
        }
        return _this.code.charAt(index);
      };
    })(this)).join('');
  };

  _Class.prototype.scramble = function() {
    var buffer, full, i, imax, j, k, num, orig, rand, ref;
    this.base = ﬁ.util.array.shuffle(chars.split('')).join('');
    this.code = ﬁ.util.array.shuffle(this.base.split('')).join('');
    orig = this.base + this.code;
    orig += Array(this.length - (orig.length % this.length) + 1).join('=');
    imax = orig.length / this.length;
    full = new Array(imax);
    rand = [];
    j = 0;
    for (i = k = 0, ref = orig.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      if (!(i % this.length)) {
        if (buffer) {
          while (true) {
            num = Math.floor(Math.random() * imax);
            if (rand.indexOf(num) === -1) {
              break;
            }
          }
          rand.push(num);
          full[num] = buffer + String.fromCharCode(48 + j++);
        }
        buffer = '';
      }
      buffer += orig[i];
    }
    return full.join('');
  };

  return _Class;

})();
