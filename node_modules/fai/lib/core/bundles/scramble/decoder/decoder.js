(function() {
  function _Class() {
    this._full = void 0;
    this._length = void 0;
    return this._unscramble();
  }

  _Class.prototype._decode = function(_str) {
    var x;
    x = _str.split('').map((function(_this) {
      return function(c) {
        var i;
        if ((i = _this._code.indexOf(c)) === -1) {
          return c;
        }
        return _this._base.charAt(i);
      };
    })(this)).join('');
    debugger;
    return x;
  };

  _Class.prototype._unscramble = function() {
    var _r, _raw, ref;
    _r = new Array((_raw = this._full.match(new RegExp(".{1," + (this._length + 1) + "}", 'g'))).length);
    _raw.map(function(_chk) {
      return _r[_chk[_chk.length - 1].charCodeAt(0) - 48] = _chk.slice(0, -1);
    });
    ref = (_r = _r.join('').replace(new RegExp(String.fromCharCode(61), 'g'), '')).match(new RegExp(".{1," + (_r.length / 2) + "}", 'g')), this._base = ref[0], this._code = ref[1];
    return this._decode.bind(this);
  };

  return _Class;

})();


/*
 * This is a utility method, it returns:
 * 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
_base64 = ((c) ->
	c.splice(1,0,c[0].toUpperCase())
	r = []
	for _ in c
		i = _[0].charCodeAt 0
		f = _[1].charCodeAt 0
		r.push String.fromCharCode(i++) while i <= f
	r.join('') + unescape('+/%3D')
)(
	[[97,122],[48,57]].map (a)-> a.map((b)-> String.fromCharCode(b)).join('')
)
 */
