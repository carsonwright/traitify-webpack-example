module.exports = (function() {
  function _Class(node, parent) {
    this.getNode = function() {
      return node;
    };
    this.getParent = function() {
      return parent;
    };
    this.getName = function() {
      return node.name;
    };
    this.getType = function() {
      return node.type;
    };
    this.getValue = function() {
      return node.value;
    };
    this.getProp = function(p) {
      return node[String(p)];
    };
  }

  _Class.prototype.isIdentifier = function() {
    return this.getType() === 'Identifier';
  };

  _Class.prototype.isString = function() {
    return this.isLiteralString() && !this.isPropertyKey() && !this.isUseStrict();
  };

  _Class.prototype.isExpression = function() {
    return this.getType() === 'ExpressionStatement';
  };

  _Class.prototype.isAssignment = function() {
    return this.getType() === 'AssignmentExpression';
  };

  _Class.prototype.isMember = function() {
    return this.getType() === 'MemberExpression';
  };

  _Class.prototype.isUncomputedMember = function() {
    return this.isMember() && !this.getProp('computed');
  };

  _Class.prototype.isUseStrict = function() {
    return this.isLiteralString() && this.getValue() === 'use strict';
  };

  _Class.prototype.isLiteralString = function() {
    var value;
    value = this.getValue();
    return this.getType() === 'Literal' && value && value.constructor === String;
  };

  _Class.prototype.isPropertyKey = function() {
    var parent;
    parent = this.getParent();
    return parent.type === 'Property' && Ô¨Å.util.object.isEqual(parent.key, this.getNode());
  };

  return _Class;

})();
