var handle, position, stack;

stack = [];

position = function(type, args) {
  var found, i, j, len, middleware, name, stk, subj;
  args = Array.prototype.slice.call(args);
  subj = args.shift();
  name = args.shift();
  middleware = args.shift();
  if (!subj) {
    throw new ﬁ.error('Invalid middleware subject.');
  }
  if (!name) {
    throw new ﬁ.error('Invalid middleware name');
  }
  if (!ﬁ.util.isFunction(middleware)) {
    throw new ﬁ.error('Invalid middleware cb.');
  }
  name = String(name);
  subj = String(subj);
  found = false;
  for (i = j = 0, len = stack.length; j < len; i = ++j) {
    stk = stack[i];
    if (stk.id !== subj) {
      continue;
    }
    found = i;
    break;
  }
  if (found === false) {
    throw new ﬁ.error("Middleware " + subj + " doesn't exist on stack.");
  }
  stk = {
    id: name,
    fn: middleware
  };
  i = type === 'after' ? i + 1 : i - 1;
  if (i < 0) {
    i = 0;
  }
  return stack.splice(i, 0, {
    id: name,
    fn: middleware
  });
};

handle = function(type, args) {
  var middleware, name, ware;
  args = Array.prototype.slice.call(args);
  name = args.shift();
  middleware = args.shift();
  if (!name) {
    throw new ﬁ.error('Invalid middleware name.');
  }
  if (!ﬁ.util.isFunction(middleware)) {
    throw new ﬁ.error('Invalid middleware.');
  }
  ware = {
    id: String(name),
    fn: middleware
  };
  if (type === 'append') {
    return stack.push(ware);
  } else if (type === 'prepend') {
    return stack.unshift(ware);
  }
};

module.exports = {
  prepend: function() {
    return handle.call(this, 'prepend', arguments);
  },
  append: function() {
    return handle.call(this, 'append', arguments);
  },
  override: function(name, middleware) {
    if (!name) {
      throw new ﬁ.error('Invalid middleware name.');
    }
    if (!ﬁ.util.isFunction(middleware)) {
      throw new ﬁ.error('Invalid middleware cb.');
    }
    name = String(name);
    return stack.map(function(stk, index) {
      if (stk.id === name) {
        stk.fn = middleware.call(middleware, stk.fn);
        if (!ﬁ.util.isFunction(stk.fn)) {
          throw new ﬁ.error('Invalid middleware overrider.');
        }
      }
      return stk;
    });
  },
  after: function() {
    return position.call(this, 'after', arguments);
  },
  before: function() {
    return position.call(this, 'before', arguments);
  },
  stack: function() {
    return stack;
  }
};
