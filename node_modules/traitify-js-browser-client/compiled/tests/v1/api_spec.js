// Generated by CoffeeScript 1.12.3
QUnit.multiStart = function(number) {
  if (QUnit.stackExecutedNumber == null) {
    QUnit.stackExecutedNumber = 0;
  }
  QUnit.stackExecutedNumber += 1;
  if (number === QUnit.stackExecutedNumber) {
    return QUnit.start();
  }
};

QUnit.module("Testing API", {
  setup: function() {
    this.Traitify = new ApiClient();
    this.Traitify.setVersion("v1");
    this.Traitify.setHost("api-sandbox.traitify.com");
    this.Traitify.setPublicKey("gglvv58easpesg9ajbltavb3gr");
    this.Traitify.XHR = MockRequest;
    return this.Traitify.online = function() {
      return true;
    };
  }
});

QUnit.test("API Client Set Host", function(assert) {
  this.Traitify.setHost("hi");
  assert.equal(this.Traitify.host, "https://hi", "Setting Host Succeeds!");
  this.Traitify.setHost("https://new_hi");
  assert.equal(this.Traitify.host, "https://new_hi", "Setting Host with https Succeeds!");
  this.Traitify.setHost("http://new_hi_with_https");
  return assert.equal("http://new_hi_with_https", "http://new_hi_with_https", "Setting Host with http is changed for https Succeeds!");
});

QUnit.test("API Client Set Version", function(assert) {
  this.Traitify.setVersion("v2");
  return assert.equal(this.Traitify.version, "v2", "Setting Version");
});

QUnit.test("API Client Set Public Key", function(assert) {
  this.Traitify.setPublicKey("here-is-the-key");
  return assert.equal(this.Traitify.publicKey, "here-is-the-key", "Setting public key Succeeds!");
});

QUnit.asyncTest("API Client Get Slides", function(assert) {
  return this.Traitify.getSlides(unPlayedAssessment).then(function(slides) {
    assert.equal(slides.length, 84, "Returns 84 slides");
    assert.equal(slides[0].caption, "Navigating", "Checking that The Caption of The First Slide Succeeds!");
    return QUnit.start();
  });
});

QUnit.asyncTest("API Client Get Decks", function(assert) {
  return this.Traitify.getDecks(function(decks) {
    assert.equal(decks[0].name, "Career Deck", "Checking that The First Deck Succeeds!");
    return QUnit.start();
  });
});

QUnit.asyncTest("API Client Add Slide", function(assert) {
  return this.Traitify.addSlide(unPlayedAssessment, 0, true, 1000, function(response) {
    assert.equal(response, "", "Checking that The First Deck Succeeds!");
    return QUnit.start();
  });
});

QUnit.asyncTest("API Client Add Slides", function(assert) {
  return this.Traitify.addSlides(unPlayedAssessment, [
    {
      id: 0,
      response: true,
      response_time: 1000
    }
  ], function(response) {
    assert.equal(response, "", "Checking that The First Deck Succeeds!");
    return QUnit.start();
  });
});

QUnit.asyncTest("API Client Add Slides", function(assert) {
  var slides;
  slides = this.Traitify.addSlides(unPlayedAssessment, [
    {
      id: 0,
      response: true,
      response_time: 1000
    }
  ]);
  return slides.then(function(response) {
    assert.equal(response, "", "Checking that The First Deck Succeeds!");
    return QUnit.start();
  });
});

QUnit.asyncTest("Get Personality Types", function(assert) {
  var personalityTypes;
  personalityTypes = this.Traitify.getPersonalityTypes(playedAssessment);
  return personalityTypes.then(function(response) {
    assert.equal(JSON.stringify(response), JSON.stringify(apiFactory.build("personality")), "Checking that The First Deck Succeeds!");
    return QUnit.start();
  });
});

QUnit.asyncTest("Test Ajax XDomainRequest", function(assert) {
  var ieTraitify, personalityTypes;
  ieTraitify = new ApiClient();
  ieTraitify.XHR = MockIEXMLRequest;
  window.XDomainRequest = MockRequest;
  ieTraitify.setVersion("v1");
  ieTraitify.setHost("api-sandbox.traitify.com");
  ieTraitify.setPublicKey("gglvv58easpesg9ajbltavb3gr");
  ieTraitify.online = function() {
    return true;
  };
  personalityTypes = ieTraitify.getPersonalityTypes(playedAssessment);
  return personalityTypes.then(function(response) {
    assert.equal(JSON.stringify(response), JSON.stringify(apiFactory.build("personality")), "Checking that The First Deck Succeedss!");
    return QUnit.start();
  });
});

QUnit.asyncTest("Test NO CORS SUPPORT", function(assert) {
  var ieTraitify, personalityTypes;
  ieTraitify = new ApiClient();
  ieTraitify.XHR = MockIEXMLRequest;
  delete window["XDomainRequest"];
  ieTraitify.setVersion("v1");
  ieTraitify.setHost("api-sandbox.traitify.com");
  ieTraitify.setPublicKey("gglvv58easpesg9ajbltavb3gr");
  personalityTypes = ieTraitify.getPersonalityTypes(playedAssessment);
  return personalityTypes["catch"](function(response) {
    assert.equal(response, "CORS is Not Supported By This Browser", "Checking that The First Deck Succeedss!");
    return QUnit.start();
  });
});

QUnit.asyncTest("Test Errors", function(assert) {
  var errorTraitify, personalityTypes;
  errorTraitify = new ApiClient();
  errorTraitify.XHR = MockRequestWithError;
  errorTraitify.setVersion("v1");
  errorTraitify.setHost("api.traitify.com");
  errorTraitify.setPublicKey("gglvv58easpesg9ajbltavb3gr");
  errorTraitify.online = function() {
    return true;
  };
  personalityTypes = errorTraitify.getPersonalityTypes(playedAssessment);
  return personalityTypes["catch"](function(response) {
    assert.equal(response, "Mock Request Error", "Checking that The First Deck Succeedss!");
    return QUnit.start();
  });
});

QUnit.asyncTest("Test Get Personality Traits", function(assert) {
  var personalityTypes;
  personalityTypes = this.Traitify.getPersonalityTraits(playedAssessment);
  return personalityTypes.then(function(response) {
    assert.ok(response[0].personality_trait.definition, "Checking that The First Deck Succeedss!");
    return QUnit.start();
  });
});

QUnit.asyncTest("Test Get Careers", function(assert) {
  var careers;
  careers = this.Traitify.getCareers(playedAssessment);
  return careers.then(function(response) {
    assert.ok(response[0].career.title, "Computer-Controlled Machine Tool Operators, Metal and Plastic");
    return QUnit.start();
  });
});
