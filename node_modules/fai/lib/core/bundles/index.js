var Assets, Bundle, FS, Path, Template, e, error1, j, len, node, ref;

Path = require('path');

FS = require('fs');

Assets = ﬁ.require('core.bundles', 'assets');

Template = {
  master: {},
  render: {}
};

Bundle = {};

ﬁ.util.fs.dirwalk(ﬁ.path.app.bundles, function(path) {
  var ctrl, ext, file, files, i, j, len, script, styl, uri, view;
  ext = ﬁ.path.script.ext;
  files = ["control" + ext, 'view.jade', 'view.styl', "view" + ext];
  for (i = j = 0, len = files.length; j < len; i = ++j) {
    file = files[i];
    file = Path.join(path, file);
    files[i] = FS.existsSync(file) ? file : false;
  }
  ctrl = files[0], view = files[1], styl = files[2], script = files[3];
  if (styl || script) {
    Assets.store(path, 'view');
  }
  if (!ctrl && !view) {
    return;
  }
  uri = path.replace(ﬁ.path.app.bundles, '').substring(1);
  return Bundle[uri] = {
    ctrl: ctrl,
    view: view
  };
});

ref = FS.readdirSync(ﬁ.path.app.master);
for (j = 0, len = ref.length; j < len; j++) {
  node = ref[j];
  if (Path.extname(node) !== '.jade') {
    continue;
  }
  Assets.store(ﬁ.path.app.master, Path.basename(node, '.jade'), 'app.master');
}

Template.render.path = Path.join(ﬁ.path.core.bundles, 'template.jade');

if (!FS.existsSync(Template.render.path)) {
  throw new ﬁ.error('Missing rendering template.');
}

Template.render.cont = FS.readFileSync(Template.render.path, ﬁ.conf.charset);

if (!FS.existsSync(Path.join(ﬁ.path.app.master, 'view.jade'))) {
  throw new ﬁ.error('The master view is missing or invalid.');
}

Template.render.cont = Template.render.cont.replace('#' + '{template}', Path.join(Path.relative(ﬁ.path.tmp, ﬁ.path.app.master), 'view'));

Template.render.path = Path.join(ﬁ.path.tmp, 'fi-render.jade');

try {
  FS.writeFileSync(Template.render.path, Template.render.cont);
  delete Template.render.cont;
} catch (error1) {
  e = error1;
  throw new ﬁ.error("Couldn't write render template: " + e.message);
}

ﬁ.log.debug(Template.render.path);

module.exports = function(name) {
  var ctrl, renderview, view;
  renderview = function(render, response) {};
  name = name.replace(/[\\\/]/g, Path.sep);
  if (!Bundle[name]) {
    throw new ﬁ.error("Bundle '" + name + "' was not found.");
  }
  ctrl = null;
  view = null;
  if (!Bundle[name].ctrl) {
    ctrl = function(request, response) {
      return response.render();
    };
  } else {
    ctrl = require(Bundle[name].ctrl);
    if (!ﬁ.util.isFunction(ctrl)) {
      throw new ﬂ.error("Bundle '" + name + "' is invalid.");
    }
  }
  view = Bundle[name].view;
  return function(request, response, next) {
    var fnRender;
    fnRender = response.render;
    request.bundle = function() {
      return ﬁ.routes[request.route.path][request.route.method];
    };
    response.renderview = function() {
      var args, back, k, locals, path, ref1, ref2, v, vars;
      args = Array.prototype.slice.call(arguments);
      path = ﬁ.util.isString(args[0]) ? args.shift() : view;
      if (!path) {
        throw new ﬁ.error('A view is not available.');
      }
      vars = ﬁ.util.object.isDict(args[0]) ? args.shift() : {};
      back = ﬁ.util.isFunction(args[0]) ? args.shift() : void 0;
      path = Path.resolve(Path.dirname(view), path);
      locals = {};
      ref1 = ﬁ.app.locals;
      for (k in ref1) {
        v = ref1[k];
        locals[k] = v;
      }
      ref2 = Assets.locals(name);
      for (k in ref2) {
        v = ref2[k];
        locals[k] = v;
      }
      for (k in vars) {
        v = vars[k];
        locals[k] = v;
      }
      return fnRender.call(response, path, locals, back);
    };
    response.render = function() {
      var args, assetsLocals, assetsRoutes, k, locals, onFnRender, path, ref1, ref2, v, vars;
      assetsLocals = Assets.locals(name);
      assetsRoutes = Assets.tree(name);
      args = Array.prototype.slice.call(arguments);
      path = ﬁ.util.isString(args[0]) ? args.shift() : view;
      if (!path) {
        throw new ﬁ.error('A view is not available.');
      }
      path = Path.resolve(Path.dirname(view), path);
      vars = args.shift();
      locals = {};
      ref1 = ﬁ.app.locals;
      for (k in ref1) {
        v = ref1[k];
        locals[k] = v;
      }
      for (k in assetsLocals) {
        v = assetsLocals[k];
        locals[k] = v;
      }
      ref2 = (!ﬁ.util.object.isDict(vars) ? {} : vars);
      for (k in ref2) {
        v = ref2[k];
        locals[k] = v;
      }
      onFnRender = function(error, content) {
        var ref3;
        if (error) {
          throw error;
        }
        ref3 = ﬁ.locals;
        for (k in ref3) {
          v = ref3[k];
          locals[k] = v;
        }
        for (k in assetsLocals) {
          v = assetsLocals[k];
          locals[k] = v;
        }
        locals.content = content;
        locals.assets = assetsRoutes;
        fnRender.call(response, Template.render.path, locals);
        return locals = assetsLocals = assetsRoutes = error = content = void 0;
      };
      return fnRender.call(response, path, locals, onFnRender);
    };
    return ctrl.call(ﬁ.server, request, response, next);
  };
};
