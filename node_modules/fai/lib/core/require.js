var FS, Path, Require, Util;

Path = require('path');

FS = require('fs');

Util = require('util');

Require = function(context, name) {
  var args, c, e, error, i, len, path, ref;
  args = Array.prototype.slice.call(arguments);
  if (args.length === 1) {
    context = 'lib';
    name = args[0];
  }
  path = ﬁ.path;
  ref = context.split('.');
  for (i = 0, len = ref.length; i < len; i++) {
    c = ref[i];
    if (path) {
      path = path[c];
    }
  }
  if (!path) {
    throw new ﬁ.error('FiRequireError', "The context '" + context + "' was not found in path.");
  }
  path = Path.join(path, name);
  try {
    require.resolve(path);
  } catch (error) {
    e = error;
    throw new ﬁ.error('FiRequireError', "Module " + name + " does not exist.");
  }
  return require(path);
};

Require.module = function(name) {
  var e, error, module;
  module = null;
  try {
    module = require(name);
  } catch (error) {
    e = error;
    throw new ﬁ.error('FiRequireError', "Could not load module " + name + ": " + e.message);
  }
  return module;
};

Require.fs = function(root) {
  var base, ext, file, i, len, path, ref, result, stat;
  result = {};
  ext = root.indexOf(ﬁ.path.root) === 0 ? ﬁ.path.core.ext : ﬁ.path.script.ext;
  ref = FS.readdirSync(root, file);
  for (i = 0, len = ref.length; i < len; i++) {
    file = ref[i];
    path = Path.join(root, file);
    stat = FS.statSync(path);
    if (!stat.isDirectory()) {
      if (Path.extname(file) !== ext) {
        continue;
      }
      base = Path.basename(file, ext);
      result[base] = require(path.replace(ext, ''));
    } else {
      result[file] = arguments.callee(path);
    }
  }
  return result;
};

module.exports = Require;
